package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"author/graph/model"
	"context"
)

// FindAuthorByID is the resolver for the findAuthorByID field.
func (r *entityResolver) FindAuthorByID(ctx context.Context, id int) (*model.Author, error) {
	authors := make([]*model.Author, 3)
	name1, name2, name3 := "Agatha Cristie", "J.K.Rowling", "H.G.Well"
	age1, age2, age3 := 98, 54, 78
	authors[0] = &model.Author{
		ID:   1,
		Name: &name1,
		Age:  &age1,
	}
	authors[1] = &model.Author{
		ID:   2,
		Name: &name2,
		Age:  &age2,
	}
	authors[2] = &model.Author{
		ID:   3,
		Name: &name3,
		Age:  &age3,
	}
	for _, author := range authors {
		if author.ID == id {
			return author, nil
		}
	}
	return nil, nil
}

// FindBookByID is the resolver for the findBookByID field.
func (r *entityResolver) FindBookByID(ctx context.Context, id int) (*model.Book, error) {
	authors := make([]*model.Author, 3)
	name1, name2, name3 := "Agatha Cristie", "J.K.Rowling", "H.G.Well"
	age1, age2, age3 := 98, 54, 78
	authors[0] = &model.Author{
		ID:   1,
		Name: &name1,
		Age:  &age1,
	}
	authors[1] = &model.Author{
		ID:   2,
		Name: &name2,
		Age:  &age2,
	}
	authors[2] = &model.Author{
		ID:   3,
		Name: &name3,
		Age:  &age3,
	}

	for _, author := range authors {
		if author.ID == id {
			return &model.Book{
				ID:     id,
				Author: author,
			}, nil
		}
	}
	return nil, nil
}

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
